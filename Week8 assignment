COVID-19 Global Data Tracker Project

Objective

Create a Python program that fetches, analyzes, and visualizes COVID-19 data globally using a public API. The project demonstrates your skills in APIs, data analysis, and visualization.


---

1. Install Required Libraries

Before running the script, make sure the following libraries are installed:

pip install requests pandas matplotlib


---

2. Python Script: covid_tracker.py

import requests
import pandas as pd
import matplotlib.pyplot as plt

# Step 1: Fetch COVID-19 Data from the API
url = "https://disease.sh/v3/covid-19/countries"
response = requests.get(url)

if response.status_code == 200:
    data = response.json()
    print("Data fetched successfully!")
else:
    print("Failed to retrieve data:", response.status_code)
    exit()

# Step 2: Load data into a DataFrame
df = pd.DataFrame(data)

# Optional: Display available columns
print("Available columns:", df.columns.tolist())

# Step 3: Display Top 10 Countries with Most COVID-19 Cases
top_cases = df[['country', 'cases']].sort_values(by='cases', ascending=False).head(10)
print("\nTop 10 Countries with Most COVID-19 Cases:")
print(top_cases)

# Step 4: Display Top 10 Countries with Most Deaths
top_deaths = df[['country', 'deaths']].sort_values(by='deaths', ascending=False).head(10)
print("\nTop 10 Countries with Most COVID-19 Deaths:")
print(top_deaths)

# Step 5: Plotting - Cases
plt.figure(figsize=(12,6))
plt.bar(top_cases['country'], top_cases['cases'], color='orange')
plt.title("Top 10 Countries with Most COVID-19 Cases")
plt.xlabel("Country")
plt.ylabel("Total Cases")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Step 6: Plotting - Deaths
plt.figure(figsize=(12,6))
plt.bar(top_deaths['country'], top_deaths['deaths'], color='red')
plt.title("Top 10 Countries with Most COVID-19 Deaths")
plt.xlabel("Country")
plt.ylabel("Total Deaths")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


---

3. Optional Stretch Goals

Allow user to input a country and view stats.

Export results to a CSV:


top_cases.to_csv("top_cases.csv", index=False)
top_deaths.to_csv("top_deaths.csv", index=False)

Add daily updates or historical graphs using time-series endpoints.
